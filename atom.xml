<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ansvverのd機關</title>
  
  <subtitle>思考 記錄 重溫 理解</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ansvver.me/"/>
  <updated>2018-03-20T14:06:21.805Z</updated>
  <id>http://ansvver.me/</id>
  
  <author>
    <name>ansvver</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tensorflow基础概念</title>
    <link href="http://ansvver.me/2017/09/05/tensorflow-basic/"/>
    <id>http://ansvver.me/2017/09/05/tensorflow-basic/</id>
    <published>2017-09-05T09:23:03.000Z</published>
    <updated>2018-03-20T14:06:21.805Z</updated>
    
    <content type="html"><![CDATA[<p>笔记整理自：<a href="https://tensorflow.google.cn/get_started/get_started" target="_blank" rel="noopener">https://tensorflow.google.cn/get_started/get_started</a></p><p>TenserFlow version: 1.3</p><h3 id="tensor"><a href="#tensor" class="headerlink" title="tensor"></a>tensor</h3><p><code>tensor</code>是TensorFlow中最重要的数据单元，一个 tensor包含了原始值的一个集合，这些原始值是任意维的一个数组（ 原文：A tensor consists of a set of primitive values shaped into an array of any number of dimensions），那么一个tensor的<strong>rank</strong>就是其维度的数量，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="comment"># a rank 0 tensor; this is a scalar with shape []</span></span><br><span class="line">[<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>] <span class="comment"># a rank 1 tensor; this is a vector with shape [3]</span></span><br><span class="line">[[<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>], [<span class="number">4.</span>, <span class="number">5.</span>, <span class="number">6.</span>]] <span class="comment"># a rank 2 tensor; a matrix with shape [2, 3]</span></span><br><span class="line">[[[<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>]], [[<span class="number">7.</span>, <span class="number">8.</span>, <span class="number">9.</span>]]] <span class="comment"># a rank 3 tensor with shape [2, 1, 3]</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="TensorFlow"><a href="#TensorFlow" class="headerlink" title="TensorFlow"></a>TensorFlow</h3><p>可以理解为TensorFlow最核心的程序由两个独立的步骤构成：</p><ol><li>构建计算图模型</li><li>运行计算图模型 </li></ol><p>在TensorFlow中，计算图模型由一系列节点通过TensorFlow操作组成。</p><p><code>constant</code>是节点的一种类型，它没有输出，输出是其内部存储的值，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">node1 = tf.constant(<span class="number">3.0</span>, dtype=tf.float32)</span><br><span class="line">node2 = tf.constant(<span class="number">4.0</span>) <span class="comment"># also tf.float32 implicitly</span></span><br><span class="line">print(node1, node2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Output:</span></span><br><span class="line"><span class="comment"># Tensor("Const:0", shape=(), dtype=float32) Tensor("Const_1:0", shape=(), dtype=float32)</span></span><br></pre></td></tr></table></figure><p>上面只是构建了这些节点，想真正地得到结果，需要在一个<code>session</code>中执行这些节点，一个<code>session</code>包含了控制和TensorFlow运行时的状态，它其实是与后端C++处理的一个连接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sess = tf.Session()</span><br><span class="line">print(sess.run([node1, node2]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Output:</span></span><br><span class="line"><span class="comment"># [3.0, 4.0]</span></span><br></pre></td></tr></table></figure><p>通过操作，可以将<code>Tensor</code>组合关联起来（Operations也是节点），如下构建一个新的图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">node3 = tf.add(node1, node2)</span><br><span class="line">print(<span class="string">"node3:"</span>, node3)</span><br><span class="line">print(<span class="string">"sess.run(node3):"</span>, sess.run(node3))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Output:</span></span><br><span class="line"><span class="comment"># node3: Tensor("Add:0", shape=(), dtype=float32)</span></span><br><span class="line"><span class="comment"># sess.run(node3): 7.0</span></span><br></pre></td></tr></table></figure><p><code>TensorBoard</code>可以可视化地显示计算图模型</p><p><img src="http://yabuhoo.qiniudn.com/static/img/201709/tensor1.png" alt=""></p><p><code>placeholder</code>可以表示一个外部的输入，这个输入保证在后面会产生一个值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = tf.placeholder(tf.float32)</span><br><span class="line">b = tf.placeholder(tf.float32)</span><br><span class="line">adder_node = a + b <span class="comment"># + provides a shortcut for tf.add(a, b)</span></span><br></pre></td></tr></table></figure><p>以上三行代码有点想<code>lambda</code>这种匿名函数的语法方式，它接受<code>a</code>,<code>b</code>两个参数，以及一个计算符号。</p><p>我们可以字典参数的形式对<code>placeholder</code>赋真正的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(sess.run(adder_node, &#123;a: 3, b: 4.5&#125;))</span><br><span class="line">print(sess.run(adder_node, &#123;a: [1, 3], b: [2, 4]&#125;))</span><br><span class="line"></span><br><span class="line"># Output:</span><br><span class="line"># 7.5</span><br><span class="line"># [ 3. 7.]</span><br></pre></td></tr></table></figure><p><img src="http://yabuhoo.qiniudn.com/static/img/201709/tensor2.png" alt=""></p><p>更复杂一些的，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">add_and_triple = adder_node * <span class="number">3.</span></span><br><span class="line">print(sess.run(add_and_triple, &#123;a: <span class="number">3</span>, b: <span class="number">4.5</span>&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Output:</span></span><br><span class="line"><span class="comment"># 22.5</span></span><br></pre></td></tr></table></figure><p><img src="http://yabuhoo.qiniudn.com/static/img/201709/tensor3.png" alt=""></p><p>在机器学习中，我们常常需要训练参数，<code>Variable</code>使得我们能对图模型添加可训练的参数，常常由类型和值组成，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">W = tf.Variable([<span class="number">.3</span>], dtype=tf.float32)</span><br><span class="line">b = tf.Variable([<span class="number">-.3</span>], dtype=tf.float32)</span><br><span class="line">x = tf.placeholder(tf.float32)</span><br><span class="line">linear_model = W * x + b</span><br></pre></td></tr></table></figure><p>常量会在调用<code>tf.constant</code>时初始化，但变量不会在调用<code>tf.Variable</code>时初始化，要初始化所有变量，可通过：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess.run(init)</span><br><span class="line">print(sess.run(linear_model, &#123;x: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Output:</span></span><br><span class="line"><span class="comment"># [ 0. 0.30000001 0.60000002 0.90000004]</span></span><br></pre></td></tr></table></figure><p>一个简单地以误差的平方和为loss的计算方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">y = tf.placeholder(tf.float32)</span><br><span class="line">squared_deltas = tf.square(linear_model - y)</span><br><span class="line">loss = tf.reduce_sum(squared_deltas)</span><br><span class="line">print(sess.run(loss, &#123;x: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], y: [<span class="number">0</span>, <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-3</span>]&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Output</span></span><br><span class="line"><span class="comment"># 23.66</span></span><br></pre></td></tr></table></figure><p>通过<code>tf.assign</code>可以对变量赋值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fixW = tf.assign(W, [<span class="number">-1.</span>])</span><br><span class="line">fixb = tf.assign(b, [<span class="number">1.</span>])</span><br><span class="line">sess.run([fixW, fixb])</span><br><span class="line">print(sess.run(loss, &#123;x: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], y: [<span class="number">0</span>, <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-3</span>]&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Output</span></span><br><span class="line"><span class="comment"># 0.0</span></span><br></pre></td></tr></table></figure><h3 id="ML-with-TF"><a href="#ML-with-TF" class="headerlink" title="ML with TF"></a>ML with TF</h3><p>一个简单、完整的线性回归模型代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># Model parameters</span></span><br><span class="line">W = tf.Variable([<span class="number">.3</span>], dtype=tf.float32)</span><br><span class="line">b = tf.Variable([<span class="number">-.3</span>], dtype=tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Model input and output</span></span><br><span class="line">x = tf.placeholder(tf.float32)</span><br><span class="line">linear_model = W * x + b</span><br><span class="line">y = tf.placeholder(tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># loss</span></span><br><span class="line">loss = tf.reduce_sum(tf.square(linear_model - y)) <span class="comment"># sum of the squares</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># optimizer</span></span><br><span class="line">optimizer = tf.train.GradientDescentOptimizer(<span class="number">0.01</span>)</span><br><span class="line">train = optimizer.minimize(loss)</span><br><span class="line"></span><br><span class="line"><span class="comment"># training data</span></span><br><span class="line">x_train = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">y_train = [<span class="number">0</span>, <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># training loop</span></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(init) <span class="comment"># reset values to wrong</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">  sess.run(train, &#123;x: x_train, y: y_train&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># evaluate training accuracy</span></span><br><span class="line">curr_W, curr_b, curr_loss = sess.run([W, b, loss], &#123;x: x_train, y: y_train&#125;)</span><br><span class="line">print(<span class="string">"W: %s b: %s loss: %s"</span>%(curr_W, curr_b, curr_loss))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Output:</span></span><br><span class="line"><span class="comment"># W: [-0.9999969] b: [ 0.99999082] loss: 5.69997e-11</span></span><br></pre></td></tr></table></figure><p>其中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># optimizer</span></span><br><span class="line">optimizer = tf.train.GradientDescentOptimizer(<span class="number">0.01</span>)</span><br><span class="line">train = optimizer.minimize(loss)</span><br></pre></td></tr></table></figure><p><code>tf.train</code>是TensorFlow提供的优化函数。</p><p>另外，<code>tf.estimator</code>包含了更高级的经典机器学习函数，以上线性回归的代码可改为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># NumPy is often used to load, manipulate and preprocess data.</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># Declare list of features. We only have one numeric feature. There are many</span></span><br><span class="line"><span class="comment"># other types of columns that are more complicated and useful.</span></span><br><span class="line">feature_columns = [tf.feature_column.numeric_column(<span class="string">"x"</span>, shape=[<span class="number">1</span>])]</span><br><span class="line"></span><br><span class="line"><span class="comment"># An estimator is the front end to invoke training (fitting) and evaluation</span></span><br><span class="line"><span class="comment"># (inference). There are many predefined types like linear regression,</span></span><br><span class="line"><span class="comment"># linear classification, and many neural network classifiers and regressors.</span></span><br><span class="line"><span class="comment"># The following code provides an estimator that does linear regression.</span></span><br><span class="line">estimator = tf.estimator.LinearRegressor(feature_columns=feature_columns)</span><br><span class="line"></span><br><span class="line"><span class="comment"># TensorFlow provides many helper methods to read and set up data sets.</span></span><br><span class="line"><span class="comment"># Here we use two data sets: one for training and one for evaluation</span></span><br><span class="line"><span class="comment"># We have to tell the function how many batches</span></span><br><span class="line"><span class="comment"># of data (num_epochs) we want and how big each batch should be.</span></span><br><span class="line">x_train = np.array([<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>, <span class="number">4.</span>])</span><br><span class="line">y_train = np.array([<span class="number">0.</span>, <span class="number">-1.</span>, <span class="number">-2.</span>, <span class="number">-3.</span>])</span><br><span class="line">x_eval = np.array([<span class="number">2.</span>, <span class="number">5.</span>, <span class="number">8.</span>, <span class="number">1.</span>])</span><br><span class="line">y_eval = np.array([<span class="number">-1.01</span>, <span class="number">-4.1</span>, <span class="number">-7</span>, <span class="number">0.</span>])</span><br><span class="line">input_fn = tf.estimator.inputs.numpy_input_fn(</span><br><span class="line">    &#123;<span class="string">"x"</span>: x_train&#125;, y_train, batch_size=<span class="number">4</span>, num_epochs=<span class="keyword">None</span>, shuffle=<span class="keyword">True</span>)</span><br><span class="line">train_input_fn = tf.estimator.inputs.numpy_input_fn(</span><br><span class="line">    &#123;<span class="string">"x"</span>: x_train&#125;, y_train, batch_size=<span class="number">4</span>, num_epochs=<span class="number">1000</span>, shuffle=<span class="keyword">False</span>)</span><br><span class="line">eval_input_fn = tf.estimator.inputs.numpy_input_fn(</span><br><span class="line">    &#123;<span class="string">"x"</span>: x_eval&#125;, y_eval, batch_size=<span class="number">4</span>, num_epochs=<span class="number">1000</span>, shuffle=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># We can invoke 1000 training steps by invoking the method and passing the</span></span><br><span class="line"><span class="comment"># training data set.</span></span><br><span class="line">estimator.train(input_fn=input_fn, steps=<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Here we evaluate how well our model did.</span></span><br><span class="line">train_metrics = estimator.evaluate(input_fn=train_input_fn)</span><br><span class="line">eval_metrics = estimator.evaluate(input_fn=eval_input_fn)</span><br><span class="line">print(<span class="string">"train metrics: %r"</span>% train_metrics)</span><br><span class="line">print(<span class="string">"eval metrics: %r"</span>% eval_metrics)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Output:</span></span><br><span class="line"><span class="comment"># train metrics: &#123;'loss': 1.2712867e-09, 'global_step': 1000&#125;</span></span><br><span class="line"><span class="comment"># eval metrics: &#123;'loss': 0.0025279333, 'global_step': 1000&#125;</span></span><br></pre></td></tr></table></figure><p>如果不想用预先定义好的模型，想自己实现内部的细节，可以使用<code>tf.estimator.Estimator</code>，实现内部的<code>model_fn</code>即可，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># Declare list of features, we only have one real-valued feature</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">model_fn</span><span class="params">(features, labels, mode)</span>:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Build a linear model and predict values</span></span><br><span class="line">  W = tf.get_variable(<span class="string">"W"</span>, [<span class="number">1</span>], dtype=tf.float64)</span><br><span class="line">  b = tf.get_variable(<span class="string">"b"</span>, [<span class="number">1</span>], dtype=tf.float64)</span><br><span class="line">  y = W * features[<span class="string">'x'</span>] + b</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Loss sub-graph</span></span><br><span class="line">  loss = tf.reduce_sum(tf.square(y - labels))</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Training sub-graph</span></span><br><span class="line">  global_step = tf.train.get_global_step()</span><br><span class="line">  optimizer = tf.train.GradientDescentOptimizer(<span class="number">0.01</span>)</span><br><span class="line">  train = tf.group(optimizer.minimize(loss),</span><br><span class="line">                   tf.assign_add(global_step, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment"># EstimatorSpec connects subgraphs we built to the</span></span><br><span class="line">  <span class="comment"># appropriate functionality.</span></span><br><span class="line">  <span class="keyword">return</span> tf.estimator.EstimatorSpec(</span><br><span class="line">      mode=mode,</span><br><span class="line">      predictions=y,</span><br><span class="line">      loss=loss,</span><br><span class="line">      train_op=train)</span><br><span class="line"></span><br><span class="line">estimator = tf.estimator.Estimator(model_fn=model_fn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># define our data sets</span></span><br><span class="line">x_train = np.array([<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>, <span class="number">4.</span>])</span><br><span class="line">y_train = np.array([<span class="number">0.</span>, <span class="number">-1.</span>, <span class="number">-2.</span>, <span class="number">-3.</span>])</span><br><span class="line">x_eval = np.array([<span class="number">2.</span>, <span class="number">5.</span>, <span class="number">8.</span>, <span class="number">1.</span>])</span><br><span class="line">y_eval = np.array([<span class="number">-1.01</span>, <span class="number">-4.1</span>, <span class="number">-7</span>, <span class="number">0.</span>])</span><br><span class="line">input_fn = tf.estimator.inputs.numpy_input_fn(</span><br><span class="line">    &#123;<span class="string">"x"</span>: x_train&#125;, y_train, batch_size=<span class="number">4</span>, num_epochs=<span class="keyword">None</span>, shuffle=<span class="keyword">True</span>)</span><br><span class="line">train_input_fn = tf.estimator.inputs.numpy_input_fn(</span><br><span class="line">    &#123;<span class="string">"x"</span>: x_train&#125;, y_train, batch_size=<span class="number">4</span>, num_epochs=<span class="number">1000</span>, shuffle=<span class="keyword">False</span>)</span><br><span class="line">eval_input_fn = tf.estimator.inputs.numpy_input_fn(</span><br><span class="line">    &#123;<span class="string">"x"</span>: x_eval&#125;, y_eval, batch_size=<span class="number">4</span>, num_epochs=<span class="number">1000</span>, shuffle=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># train</span></span><br><span class="line">estimator.train(input_fn=input_fn, steps=<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Here we evaluate how well our model did.</span></span><br><span class="line">train_metrics = estimator.evaluate(input_fn=train_input_fn)</span><br><span class="line">eval_metrics = estimator.evaluate(input_fn=eval_input_fn)</span><br><span class="line">print(<span class="string">"train metrics: %r"</span>% train_metrics)</span><br><span class="line">print(<span class="string">"eval metrics: %r"</span>% eval_metrics)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Output:</span></span><br><span class="line"><span class="comment"># train metrics: &#123;'loss': 1.227995e-11, 'global_step': 1000&#125;</span></span><br><span class="line"><span class="comment"># eval metrics: &#123;'loss': 0.01010036, 'global_step': 1000&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;笔记整理自：&lt;a href=&quot;https://tensorflow.google.cn/get_started/get_started&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://tensorflow.google.cn/get_started/get_started&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;TenserFlow version: 1.3&lt;/p&gt;
&lt;h3 id=&quot;tensor&quot;&gt;&lt;a href=&quot;#tensor&quot; class=&quot;headerlink&quot; title=&quot;tensor&quot;&gt;&lt;/a&gt;tensor&lt;/h3&gt;&lt;p&gt;&lt;code&gt;tensor&lt;/code&gt;是TensorFlow中最重要的数据单元，一个 tensor包含了原始值的一个集合，这些原始值是任意维的一个数组（ 原文：A tensor consists of a set of primitive values shaped into an array of any number of dimensions），那么一个tensor的&lt;strong&gt;rank&lt;/strong&gt;就是其维度的数量，如：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# a rank 0 tensor; this is a scalar with shape []&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2.&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3.&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;# a rank 1 tensor; this is a vector with shape [3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2.&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3.&lt;/span&gt;], [&lt;span class=&quot;number&quot;&gt;4.&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5.&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6.&lt;/span&gt;]] &lt;span class=&quot;comment&quot;&gt;# a rank 2 tensor; a matrix with shape [2, 3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[[&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2.&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3.&lt;/span&gt;]], [[&lt;span class=&quot;number&quot;&gt;7.&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8.&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9.&lt;/span&gt;]]] &lt;span class=&quot;comment&quot;&gt;# a rank 3 tensor with shape [2, 1, 3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://ansvver.me/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="http://ansvver.me/tags/Python/"/>
    
      <category term="TensorFlow" scheme="http://ansvver.me/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib示例</title>
    <link href="http://ansvver.me/2017/09/04/matplot_examples/"/>
    <id>http://ansvver.me/2017/09/04/matplot_examples/</id>
    <published>2017-09-04T14:13:02.000Z</published>
    <updated>2018-03-20T09:41:40.409Z</updated>
    
    <content type="html"><![CDATA[<h4 id="在-py文件中作图："><a href="#在-py文件中作图：" class="headerlink" title="在.py文件中作图："></a>在<code>.py</code>文件中作图：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ------- file: myplot.py ------</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">plt.plot(x, np.sin(x))</span><br><span class="line">plt.plot(x, np.cos(x))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>执行以上代码会弹出一个结果窗口。</p><p>注意<code>plt.show()</code>一般写在脚本的末尾，且尽量保证每个Python session只出现一次，多个<code>show()</code>命令可能导致不可预测后台行为</p><a id="more"></a><h4 id="在IPython-notebook中作图"><a href="#在IPython-notebook中作图" class="headerlink" title="在IPython notebook中作图"></a>在IPython notebook中作图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">fig = plt.figure()</span><br><span class="line">plt.plot(x, np.sin(x), <span class="string">'-'</span>)</span><br><span class="line">plt.plot(x, np.cos(x), <span class="string">'--'</span>);</span><br></pre></td></tr></table></figure><p><img src="http://yabuhoo.qiniudn.com/static/img/201709/plot1.png" alt=""></p><p>第一行使得每个plot单元的代码都直接嵌入一个PNG的结果图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line">plt.savefig(<span class="string">'my_figure.png'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开图片</span></span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image</span><br><span class="line">Image(<span class="string">'my_figure.png'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">##### MATLAB-style interface</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create a plot figure</span></span><br><span class="line">plt.figure() </span><br><span class="line"></span><br><span class="line"><span class="comment"># create the first of two panels and set current axis</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>) <span class="comment"># (rows, columns, panel number)</span></span><br><span class="line">plt.plot(x, np.sin(x));</span><br><span class="line"></span><br><span class="line"><span class="comment"># create the second panel and set current axis</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">plt.plot(x, np.cos(x));</span><br><span class="line"></span><br><span class="line"><span class="comment">##### Object-oriented interface</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># First create a grid of plots</span></span><br><span class="line"><span class="comment"># ax will be an array of two Axes objects</span></span><br><span class="line">fig, ax = plt.subplots(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Call plot() method on the appropriate object</span></span><br><span class="line">ax[<span class="number">0</span>].plot(x, np.sin(x))</span><br><span class="line">ax[<span class="number">1</span>].plot(x, np.cos(x));</span><br><span class="line"></span><br><span class="line"><span class="comment">#####  transition</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">plt.xlabel() → ax.set_xlabel()</span></span><br><span class="line"><span class="string">plt.ylabel() → ax.set_ylabel()</span></span><br><span class="line"><span class="string">plt.xlim() → ax.set_xlim()</span></span><br><span class="line"><span class="string">plt.ylim() → ax.set_ylim()</span></span><br><span class="line"><span class="string">plt.title() → ax.set_title()</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p><img src="http://yabuhoo.qiniudn.com/static/img/201709/plot2.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x, x + <span class="number">0</span>, <span class="string">'-g'</span>) <span class="comment"># solid green</span></span><br><span class="line">plt.plot(x, x + <span class="number">1</span>, <span class="string">'--c'</span>) <span class="comment"># dashed cyan</span></span><br><span class="line">plt.plot(x, x + <span class="number">2</span>, <span class="string">'-.k'</span>) <span class="comment"># dashdot black</span></span><br><span class="line">plt.plot(x, x + <span class="number">3</span>, <span class="string">':r'</span>); <span class="comment"># dotted red</span></span><br></pre></td></tr></table></figure><p><img src="http://yabuhoo.qiniudn.com/static/img/201709/plot3.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x, np.sin(x))</span><br><span class="line">plt.xlim(<span class="number">-1</span>, <span class="number">11</span>)</span><br><span class="line">plt.ylim(<span class="number">-1.5</span>, <span class="number">1.5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">##### or</span></span><br><span class="line"></span><br><span class="line">plt.plot(x, np.sin(x))</span><br><span class="line">plt.axis([<span class="number">-1</span>, <span class="number">11</span>, <span class="number">-1.5</span>, <span class="number">1.5</span>]);</span><br></pre></td></tr></table></figure><p><img src="http://yabuhoo.qiniudn.com/static/img/201709/plot4.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x, np.sin(x))</span><br><span class="line">plt.axis(<span class="string">'tight'</span>);</span><br></pre></td></tr></table></figure><p><img src="http://yabuhoo.qiniudn.com/static/img/201709/plot5.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x, np.sin(x))</span><br><span class="line">plt.axis(<span class="string">'equal'</span>);</span><br></pre></td></tr></table></figure><p><img src="http://yabuhoo.qiniudn.com/static/img/201709/plot6.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x, np.sin(x))</span><br><span class="line">plt.title(<span class="string">"A Sine Curve"</span>)</span><br><span class="line">plt.xlabel(<span class="string">"x"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"sin(x)"</span>);</span><br></pre></td></tr></table></figure><p><img src="http://yabuhoo.qiniudn.com/static/img/201709/plot7.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x, np.sin(x), <span class="string">'-g'</span>, label=<span class="string">'sin(x)'</span>)</span><br><span class="line">plt.plot(x, np.cos(x), <span class="string">':b'</span>, label=<span class="string">'cos(x)'</span>)</span><br><span class="line">plt.axis(<span class="string">'equal'</span>)</span><br><span class="line">plt.legend();</span><br></pre></td></tr></table></figure><p><img src="http://yabuhoo.qiniudn.com/static/img/201709/plot8.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ax = plt.axes()</span><br><span class="line">ax.plot(x, np.sin(x))</span><br><span class="line">ax.set(xlim=(<span class="number">0</span>, <span class="number">10</span>), ylim=(<span class="number">-2</span>, <span class="number">2</span>),</span><br><span class="line">       xlabel=<span class="string">'x'</span>, ylabel=<span class="string">'sin(x)'</span>,</span><br><span class="line">       title=<span class="string">'A Simple Plot'</span>);</span><br></pre></td></tr></table></figure><p><img src="http://yabuhoo.qiniudn.com/static/img/201709/plot9.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">30</span>)</span><br><span class="line">y = np.sin(x)</span><br><span class="line">plt.plot(x, y, <span class="string">'o'</span>, color=<span class="string">'black'</span>);</span><br></pre></td></tr></table></figure><p><img src="http://yabuhoo.qiniudn.com/static/img/201709/plot10.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rng = np.random.RandomState(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> marker <span class="keyword">in</span> [<span class="string">'o'</span>, <span class="string">'.'</span>, <span class="string">','</span>, <span class="string">'x'</span>, <span class="string">'+'</span>, <span class="string">'v'</span>, <span class="string">'^'</span>, <span class="string">'&lt;'</span>, <span class="string">'&gt;'</span>, <span class="string">'s'</span>, <span class="string">'d'</span>]:</span><br><span class="line">    plt.plot(rng.rand(<span class="number">5</span>), rng.rand(<span class="number">5</span>), marker,</span><br><span class="line">             label=<span class="string">"marker='&#123;0&#125;'"</span>.format(marker))</span><br><span class="line">plt.legend(numpoints=<span class="number">1</span>)</span><br><span class="line">plt.xlim(<span class="number">0</span>, <span class="number">1.8</span>);</span><br></pre></td></tr></table></figure><p><img src="http://yabuhoo.qiniudn.com/static/img/201709/plot11.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x, y, <span class="string">'-ok'</span>);</span><br></pre></td></tr></table></figure><p><img src="http://yabuhoo.qiniudn.com/static/img/201709/plot12.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rng = np.random.RandomState(<span class="number">0</span>)</span><br><span class="line">x = rng.randn(<span class="number">100</span>)</span><br><span class="line">y = rng.randn(<span class="number">100</span>)</span><br><span class="line">colors = rng.rand(<span class="number">100</span>)</span><br><span class="line">sizes = <span class="number">1000</span> * rng.rand(<span class="number">100</span>)</span><br><span class="line">plt.scatter(x, y, c=colors, s=sizes, alpha=<span class="number">0.3</span>,</span><br><span class="line">            cmap=<span class="string">'viridis'</span>)</span><br><span class="line">plt.colorbar(); <span class="comment"># show color scale</span></span><br></pre></td></tr></table></figure><p><img src="http://yabuhoo.qiniudn.com/static/img/201709/plot13.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">50</span>)</span><br><span class="line">dy = <span class="number">0.8</span></span><br><span class="line">y = np.sin(x) + dy * np.random.randn(<span class="number">50</span>)</span><br><span class="line">plt.errorbar(x, y, yerr=dy, fmt=<span class="string">'.k'</span>);</span><br></pre></td></tr></table></figure><p><img src="http://yabuhoo.qiniudn.com/static/img/201709/plot14.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.style.use(<span class="string">'seaborn-white'</span>)</span><br><span class="line">data = np.random.randn(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">plt.hist(data, bins=<span class="number">30</span>, normed=<span class="keyword">True</span>, alpha=<span class="number">0.5</span>,</span><br><span class="line">         histtype=<span class="string">'stepfilled'</span>, color=<span class="string">'steelblue'</span>,</span><br><span class="line">         edgecolor=<span class="string">'none'</span>);</span><br></pre></td></tr></table></figure><p><img src="http://yabuhoo.qiniudn.com/static/img/201709/plot15.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x1 = np.random.normal(<span class="number">0</span>, <span class="number">0.8</span>, <span class="number">1000</span>)</span><br><span class="line">x2 = np.random.normal(<span class="number">-2</span>, <span class="number">1</span>, <span class="number">1000</span>)</span><br><span class="line">x3 = np.random.normal(<span class="number">3</span>, <span class="number">2</span>, <span class="number">1000</span>)</span><br><span class="line">kwargs = dict(histtype=<span class="string">'stepfilled'</span>, alpha=<span class="number">0.3</span>, normed=<span class="keyword">True</span>, bins=<span class="number">40</span>)</span><br><span class="line">plt.hist(x1, **kwargs)</span><br><span class="line">plt.hist(x2, **kwargs)</span><br><span class="line">plt.hist(x3, **kwargs);</span><br></pre></td></tr></table></figure><p><img src="http://yabuhoo.qiniudn.com/static/img/201709/plot16.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mean = [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">cov = [[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">2</span>]]</span><br><span class="line">x, y = np.random.multivariate_normal(mean, cov, <span class="number">10000</span>).T</span><br><span class="line"></span><br><span class="line">plt.hist2d(x, y, bins=<span class="number">30</span>, cmap=<span class="string">'Blues'</span>)</span><br><span class="line">cb = plt.colorbar()</span><br><span class="line">cb.set_label(<span class="string">'counts in bin'</span>)</span><br></pre></td></tr></table></figure><p><img src="http://yabuhoo.qiniudn.com/static/img/201709/plot17.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots()</span><br><span class="line">lines = []</span><br><span class="line">styles = [<span class="string">'-'</span>, <span class="string">'--'</span>, <span class="string">'-.'</span>, <span class="string">':'</span>]</span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">1000</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    lines += ax.plot(x, np.sin(x - i * np.pi / <span class="number">2</span>),</span><br><span class="line">                     styles[i], color=<span class="string">'black'</span>)</span><br><span class="line">ax.axis(<span class="string">'equal'</span>)</span><br><span class="line"><span class="comment"># specify the lines and labels of the first legend</span></span><br><span class="line">ax.legend(lines[:<span class="number">2</span>], [<span class="string">'line A'</span>, <span class="string">'line B'</span>],</span><br><span class="line">          loc=<span class="string">'upper right'</span>, frameon=<span class="keyword">False</span>)</span><br><span class="line"><span class="comment"># Create the second legend and add the artist manually.</span></span><br><span class="line"><span class="keyword">from</span> matplotlib.legend <span class="keyword">import</span> Legend</span><br><span class="line">leg = Legend(ax, lines[<span class="number">2</span>:], [<span class="string">'line C'</span>, <span class="string">'line D'</span>],</span><br><span class="line">             loc=<span class="string">'lower right'</span>, frameon=<span class="keyword">False</span>)</span><br><span class="line">ax.add_artist(leg);</span><br></pre></td></tr></table></figure><p><img src="http://yabuhoo.qiniudn.com/static/img/201709/plot18.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># project the digits into 2 dimensions using IsoMap</span></span><br><span class="line"><span class="keyword">from</span> sklearn.manifold <span class="keyword">import</span> Isomap</span><br><span class="line">iso = Isomap(n_components=<span class="number">2</span>)</span><br><span class="line">projection = iso.fit_transform(digits.data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># plot the results</span></span><br><span class="line">plt.scatter(projection[:, <span class="number">0</span>], projection[:, <span class="number">1</span>], lw=<span class="number">0.1</span>,</span><br><span class="line">            c=digits.target, cmap=plt.cm.get_cmap(<span class="string">'cubehelix'</span>, <span class="number">6</span>))</span><br><span class="line">plt.colorbar(ticks=range(<span class="number">6</span>), label=<span class="string">'digit value'</span>)</span><br><span class="line">plt.clim(<span class="number">-0.5</span>, <span class="number">5.5</span>)</span><br></pre></td></tr></table></figure><p><img src="http://yabuhoo.qiniudn.com/static/img/201709/plot19.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure()</span><br><span class="line">fig.subplots_adjust(hspace=<span class="number">0.4</span>, wspace=<span class="number">0.4</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">7</span>):</span><br><span class="line">    ax = fig.add_subplot(<span class="number">2</span>, <span class="number">3</span>, i)</span><br><span class="line">    ax.text(<span class="number">0.5</span>, <span class="number">0.5</span>, str((<span class="number">2</span>, <span class="number">3</span>, i)),</span><br><span class="line">           fontsize=<span class="number">18</span>, ha=<span class="string">'center'</span>)</span><br></pre></td></tr></table></figure><p><img src="http://yabuhoo.qiniudn.com/static/img/201709/plot20.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create some normally distributed data</span></span><br><span class="line">mean = [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">cov = [[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">2</span>]]</span><br><span class="line">x, y = np.random.multivariate_normal(mean, cov, <span class="number">3000</span>).T</span><br><span class="line"><span class="comment"># Set up the axes with gridspec</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">6</span>, <span class="number">6</span>))</span><br><span class="line">grid = plt.GridSpec(<span class="number">4</span>, <span class="number">4</span>, hspace=<span class="number">0.2</span>, wspace=<span class="number">0.2</span>)</span><br><span class="line">main_ax = fig.add_subplot(grid[:<span class="number">-1</span>, <span class="number">1</span>:])</span><br><span class="line">y_hist = fig.add_subplot(grid[:<span class="number">-1</span>, <span class="number">0</span>], xticklabels=[], sharey=main_ax)</span><br><span class="line">x_hist = fig.add_subplot(grid[<span class="number">-1</span>, <span class="number">1</span>:], yticklabels=[], sharex=main_ax)</span><br><span class="line"><span class="comment"># scatter points on the main axes</span></span><br><span class="line">main_ax.plot(x, y, <span class="string">'ok'</span>, markersize=<span class="number">3</span>, alpha=<span class="number">0.2</span>)</span><br><span class="line"><span class="comment"># histogram on the attached axes</span></span><br><span class="line">x_hist.hist(x, <span class="number">40</span>, histtype=<span class="string">'stepfilled'</span>,</span><br><span class="line">            orientation=<span class="string">'vertical'</span>, color=<span class="string">'gray'</span>)</span><br><span class="line">x_hist.invert_yaxis()</span><br><span class="line">y_hist.hist(y, <span class="number">40</span>, histtype=<span class="string">'stepfilled'</span>,</span><br><span class="line">            orientation=<span class="string">'horizontal'</span>, color=<span class="string">'gray'</span>)</span><br><span class="line">y_hist.invert_xaxis()</span><br></pre></td></tr></table></figure><p><img src="http://yabuhoo.qiniudn.com/static/img/201709/plot21.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(facecolor=<span class="string">'lightgray'</span>)</span><br><span class="line">ax.axis([<span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">10</span>])</span><br><span class="line"><span class="comment"># transform=ax.transData is the default, but we'll specify it anyway</span></span><br><span class="line">ax.text(<span class="number">1</span>, <span class="number">5</span>, <span class="string">". Data: (1, 5)"</span>, transform=ax.transData)</span><br><span class="line">ax.text(<span class="number">0.5</span>, <span class="number">0.1</span>, <span class="string">". Axes: (0.5, 0.1)"</span>, transform=ax.transAxes)</span><br><span class="line">ax.text(<span class="number">0.2</span>, <span class="number">0.2</span>, <span class="string">". Figure: (0.2, 0.2)"</span>, transform=fig.transFigure);</span><br></pre></td></tr></table></figure><p><img src="http://yabuhoo.qiniudn.com/static/img/201709/plot22.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(<span class="number">5</span>, <span class="number">5</span>, figsize=(<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">fig.subplots_adjust(hspace=<span class="number">0</span>, wspace=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># Get some face data from scikit-learn</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> fetch_olivetti_faces</span><br><span class="line">faces = fetch_olivetti_faces().images</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        ax[i, j].xaxis.set_major_locator(plt.NullLocator())</span><br><span class="line">        ax[i, j].yaxis.set_major_locator(plt.NullLocator())</span><br><span class="line">        ax[i, j].imshow(faces[<span class="number">10</span> * i + j], cmap=<span class="string">"bone"</span>)</span><br></pre></td></tr></table></figure><p><img src="http://yabuhoo.qiniudn.com/static/img/201709/plot23.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.style.available</span><br><span class="line">plt.style.use(<span class="string">'classic'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ax = plt.axes(projection=<span class="string">'3d'</span>)</span><br><span class="line"><span class="comment"># Data for a three-dimensional line</span></span><br><span class="line">zline = np.linspace(<span class="number">0</span>, <span class="number">15</span>, <span class="number">1000</span>)</span><br><span class="line">xline = np.sin(zline)</span><br><span class="line">yline = np.cos(zline)</span><br><span class="line">ax.plot3D(xline, yline, zline, <span class="string">'gray'</span>)</span><br><span class="line"><span class="comment"># Data for three-dimensional scattered points</span></span><br><span class="line">zdata = <span class="number">15</span> * np.random.random(<span class="number">100</span>)</span><br><span class="line">xdata = np.sin(zdata) + <span class="number">0.1</span> * np.random.randn(<span class="number">100</span>)</span><br><span class="line">ydata = np.cos(zdata) + <span class="number">0.1</span> * np.random.randn(<span class="number">100</span>)</span><br><span class="line">ax.scatter3D(xdata, ydata, zdata, c=zdata, cmap=<span class="string">'Greens'</span>);</span><br></pre></td></tr></table></figure><p><img src="http://yabuhoo.qiniudn.com/static/img/201709/plot24.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.style.use(<span class="string">'classic'</span>)</span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create some data</span></span><br><span class="line">rng = np.random.RandomState(<span class="number">0</span>)</span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">500</span>)</span><br><span class="line">y = np.cumsum(rng.randn(<span class="number">500</span>, <span class="number">6</span>), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">sns.set()</span><br><span class="line"></span><br><span class="line"><span class="comment"># same plotting code as above!</span></span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.legend(<span class="string">'ABCDEF'</span>, ncol=<span class="number">2</span>, loc=<span class="string">'upper left'</span>);</span><br></pre></td></tr></table></figure><p><img src="http://yabuhoo.qiniudn.com/static/img/201709/plot25.png" alt=""></p><p>代码收集自：<a href="https://jakevdp.github.io/PythonDataScienceHandbook/04.00-introduction-to-matplotlib.html" target="_blank" rel="noopener">https://jakevdp.github.io/PythonDataScienceHandbook/04.00-introduction-to-matplotlib.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;在-py文件中作图：&quot;&gt;&lt;a href=&quot;#在-py文件中作图：&quot; class=&quot;headerlink&quot; title=&quot;在.py文件中作图：&quot;&gt;&lt;/a&gt;在&lt;code&gt;.py&lt;/code&gt;文件中作图：&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ------- file: myplot.py ------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x = np.linspace(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.plot(x, np.sin(x))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.plot(x, np.cos(x))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行以上代码会弹出一个结果窗口。&lt;/p&gt;
&lt;p&gt;注意&lt;code&gt;plt.show()&lt;/code&gt;一般写在脚本的末尾，且尽量保证每个Python session只出现一次，多个&lt;code&gt;show()&lt;/code&gt;命令可能导致不可预测后台行为&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="http://ansvver.me/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="Python" scheme="http://ansvver.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Pandas code</title>
    <link href="http://ansvver.me/2017/08/28/pandas-code/"/>
    <id>http://ansvver.me/2017/08/28/pandas-code/</id>
    <published>2017-08-28T08:05:32.000Z</published>
    <updated>2018-03-20T09:41:40.410Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://yabuhoo.qiniudn.com/static/img/201708/pandas_logo.png" alt=""></p><p>一直认为<code>pandas</code> 是个好用但也难用的东西，因为它能做的东西太多了，同一个操作也有多种实现的方式（当然不同方式之前会有一些性能与规范上的差异），这也导致<code>pandas</code>的API函数十分的多。</p><p>以下是我整理的一些常用应用场景，每一个方法或技巧都是点一下，如果读者觉得某一点需求适用，再自行google相应的api，毕竟每个人的需求不同。</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  pandas输出格式</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.set_option(<span class="string">'display.height'</span>, <span class="number">1000</span>)</span><br><span class="line">pd.set_option(<span class="string">'display.max_rows'</span>, <span class="number">500</span>)</span><br><span class="line">pd.set_option(<span class="string">'display.max_columns'</span>, <span class="number">500</span>)</span><br><span class="line">pd.set_option(<span class="string">'display.width'</span>, <span class="number">1000</span>)</span><br><span class="line">pd.set_option(<span class="string">'display.expand_frame_repr'</span>, <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置数据格式，避免比较大的数据以科学计数法显示</span></span><br><span class="line">pd.set_option(<span class="string">'display.float_format'</span>, <span class="keyword">lambda</span> x: <span class="string">'%.3f'</span> % x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从'\t'分隔文件中构造DataFrame</span></span><br><span class="line">df = pd.read_csv(<span class="string">'input.data'</span>, sep=<span class="string">'\t'</span>, names=[<span class="string">'nid'</span>, <span class="string">'url'</span>, <span class="string">'timestamp'</span>, <span class="string">'title'</span>, <span class="string">'attention'</span>, <span class="string">'show'</span>, <span class="string">'click'</span>, <span class="string">'down'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打平、操作索引与属性列</span></span><br><span class="line">df.reset_index(drop=<span class="keyword">True</span>)</span><br><span class="line">df.set_index([<span class="string">'state'</span>, <span class="string">'year'</span>])</span><br><span class="line">df.reindex_axis(sorted(df.columns), axis=<span class="number">1</span>)</span><br><span class="line">df.reindex(map(<span class="keyword">lambda</span> x: datetime.datetime.strftime(x, <span class="string">"%Y-%m-%d"</span>), date_series))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出Dataframe中某列去重后的值</span></span><br><span class="line">pd.unique(df.column_name.ravel())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除重复</span></span><br><span class="line">df.drop_duplicates()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除NaN</span></span><br><span class="line">df.dropna(subset=[<span class="string">'three'</span>, <span class="string">'four'</span>, <span class="string">'five'</span>], how=<span class="string">'all'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两种方法把某列转化为数字，并把不能转的列置为NaN</span></span><br><span class="line">df[<span class="string">'col'</span>] = df[<span class="string">'col'</span>].astype(str).convert_objects(convert_numeric=<span class="keyword">True</span>)</span><br><span class="line">df_clean.loc[:, <span class="string">'show'</span>] = pd.to_numeric(df_clean[<span class="string">'show'</span>], errors=<span class="string">'coerce'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把某列只在白名单的行拿出</span></span><br><span class="line">valuelist = [<span class="string">'value1'</span>, <span class="string">'value2'</span>, <span class="string">'value3'</span>]</span><br><span class="line">df = df[df.column.isin(valuelist)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把某列不在白名单的行拿出</span></span><br><span class="line">valuelist = [<span class="string">'value1'</span>, <span class="string">'value2'</span>, <span class="string">'value3'</span>]</span><br><span class="line">df = df[~df.column.isin(value_list)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除某列</span></span><br><span class="line"><span class="keyword">del</span> df[<span class="string">'column'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除NaN的记录</span></span><br><span class="line">df_clean.dropna(axis=<span class="number">0</span>, how=<span class="string">'any'</span>, thresh=<span class="keyword">None</span>, subset=[<span class="string">'show'</span>, <span class="string">'click'</span>, <span class="string">'down'</span>, <span class="string">'sc_ratio'</span>], inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复杂条件过滤，使用：|&amp;～</span></span><br><span class="line">newdf = df[(df[<span class="string">'column_one'</span>]&gt;<span class="number">2004</span>) &amp; (df[<span class="string">'column_two'</span>]==<span class="number">9</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名列名</span></span><br><span class="line">df = df.rename(columns = &#123;</span><br><span class="line">    <span class="string">'col1 old name'</span>:<span class="string">'col1 new name'</span>,</span><br><span class="line">    <span class="string">'col2 old name'</span>:<span class="string">'col2 new name'</span>,</span><br><span class="line">    <span class="string">'col3 old name'</span>:<span class="string">'col3 new name'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># map, apply, applymap</span></span><br><span class="line">df.columns = map(str.lower, df.columns)</span><br><span class="line">df[<span class="string">'str_col'</span>].dropna().map(<span class="keyword">lambda</span> x : <span class="string">'map_'</span> + x)</span><br><span class="line">df.ix[:,[<span class="string">'int_col'</span>,<span class="string">'float_col'</span>]].apply(np.sqrt)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_fn</span><span class="params">(x)</span>:</span></span><br><span class="line">   <span class="keyword">if</span> type(x) <span class="keyword">is</span> str:</span><br><span class="line">   <span class="keyword">return</span> <span class="string">'applymap_'</span> + x</span><br><span class="line">   <span class="keyword">elif</span> x:</span><br><span class="line">   <span class="keyword">return</span> <span class="number">100</span> * x</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">df.applymap(some_fn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列名重命名的另一种方式</span></span><br><span class="line">df.rename(columns=<span class="keyword">lambda</span> x: x.split(<span class="string">'.'</span>)[<span class="number">-1</span>], inplace=<span class="keyword">True</span>)</span><br><span class="line">df.rename(columns=&#123;<span class="string">'int_col'</span> : <span class="string">'some_other_name'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历DataFrame中的每一行，如果真的必要的话</span></span><br><span class="line"><span class="keyword">for</span> index, row <span class="keyword">in</span> df.iterrows():</span><br><span class="line">    <span class="keyword">print</span> index, row[<span class="string">'some column'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这种方式比上面那种快很多</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> df.itertuples():</span><br><span class="line">    print(row)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pandas内置字符串操作</span></span><br><span class="line"><span class="comment"># Full list of .str functions: http://pandas.pydata.org/pandas-docs/stable/text.html</span></span><br><span class="line">df.column.str[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 某列的值变小写</span></span><br><span class="line">df.column_name = df.column_name.str.lower()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 某列所有字符值的长度</span></span><br><span class="line">df.column_name.str.len()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以index排序</span></span><br><span class="line">df.sort_index(inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多级排序</span></span><br><span class="line">df = df.sort(by=[<span class="string">'col1'</span>,<span class="string">'col2'</span>,<span class="string">'col3'</span>], ascending=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>], inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取每组数据的前5个数据（可以结合sort先对数据排序）</span></span><br><span class="line">top5 = df.groupby([<span class="string">'groupingcol1'</span>, <span class="string">'groupingcol2'</span>]).head(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取某些列数据</span></span><br><span class="line">df[[<span class="string">'float_col'</span>,<span class="string">'int_col'</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取某列值为null的所有行</span></span><br><span class="line">newdf = df[df[<span class="string">'column'</span>].isnull()]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用多级索引中的多个键取记录</span></span><br><span class="line">df.xs((<span class="string">'index level 1 value'</span>,<span class="string">'index level 2 value'</span>), level=(<span class="string">'level 1'</span>,<span class="string">'level 2'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将所有NaN改为None值，对加载db数据处理很有用</span></span><br><span class="line">df = df.where((pd.notnull(df)), <span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 快速获取行数</span></span><br><span class="line">len(df.index)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据透视表，参数依次为展现的数据、行、列</span></span><br><span class="line">df.pivot_table([<span class="string">'data1'</span>], index=<span class="string">'key1'</span>,columns=<span class="string">'key2'</span>)</span><br><span class="line">titanic.groupby([<span class="string">'sex'</span>, <span class="string">'class'</span>])[<span class="string">'survived'</span>].aggregate(<span class="string">'mean'</span>).unstack()</span><br><span class="line">titanic.pivot_table(<span class="string">'survived'</span>, index=<span class="string">'sex'</span>, columns=<span class="string">'class'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改列的数据类型</span></span><br><span class="line">df.column_name = df.column_name.astype(np.int64)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则处理列的所有值</span></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> refunds.columns.values:</span><br><span class="line">  refunds[col] = refunds[col].replace(<span class="string">'[^0-9]+'</span>, <span class="string">''</span>, regex=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  对过滤出的列赋值</span></span><br><span class="line">df.loc[(df[<span class="string">'column1'</span>] == some_value) &amp; (df[<span class="string">'column2'</span>] == some_other_value), [<span class="string">'column_to_change'</span>]] = new_value</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对不同列的缺失值做不同处理</span></span><br><span class="line">df = df.fillna(&#123;</span><br><span class="line">    <span class="string">'col1'</span>: <span class="string">'missing'</span>,</span><br><span class="line">    <span class="string">'col2'</span>: <span class="string">'99.999'</span>,</span><br><span class="line">    <span class="string">'col3'</span>: <span class="string">'999'</span>,</span><br><span class="line">    <span class="string">'col4'</span>: <span class="string">'missing'</span>,</span><br><span class="line">    <span class="string">'col5'</span>: <span class="string">'missing'</span>,</span><br><span class="line">    <span class="string">'col6'</span>: <span class="string">'99'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用均值替换缺失值</span></span><br><span class="line">mean = df[<span class="string">'float_col'</span>].mean()</span><br><span class="line">df[<span class="string">'float_col'</span>].fillna(mean)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跨列计算、赋值</span></span><br><span class="line">df[<span class="string">'newcol'</span>] = df[<span class="string">'col1'</span>].map(str) + df[<span class="string">'col2'</span>].map(str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对空缺值进行计算</span></span><br><span class="line"><span class="comment"># 下面是把为null值的df['col1']转为0，再进行计算</span></span><br><span class="line">df[<span class="string">'new_col'</span>] = np.where(pd.isnull(df[<span class="string">'col1'</span>]),<span class="number">0</span>,df[<span class="string">'col1'</span>]) + df[<span class="string">'col2'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对某列数据进行数据切分，下面把一列数据分割为两列</span></span><br><span class="line">df[<span class="string">'new_col1'</span>], df[<span class="string">'new_col2'</span>] = zip(*df[<span class="string">'original_col'</span>].apply(<span class="keyword">lambda</span> x: x.split(<span class="string">': '</span>, <span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并 （打平）多层索引</span></span><br><span class="line">df.columns = df.columns.get_level_values(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过Python字典构造DataFrame</span></span><br><span class="line">df = pd.DataFrame(list(a_dictionary.items()), columns = [<span class="string">'column1'</span>, <span class="string">'column2'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过DataFrame构造字典</span></span><br><span class="line">df.T.to_dict().values()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对特定的列查看重复情况，keep可为first、last、False</span></span><br><span class="line">dupes = df[df.duplicated([<span class="string">'col1'</span>, <span class="string">'col2'</span>, <span class="string">'col3'</span>], keep=<span class="keyword">False</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#  Pipline: group, sum, sort</span></span><br><span class="line">series_df.groupby([<span class="string">'DATA_TYPE'</span>, <span class="string">'DATA_DATE'</span>, <span class="string">'ADDR_ID'</span>], as_index=<span class="keyword">False</span>)[<span class="string">'QUANTITY'</span>].sum().sort_values(by=<span class="string">'QUANTITY'</span>, ascending=<span class="keyword">False</span>).head(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Groupby后面可接aggregate, filter, transform, apply</span></span><br><span class="line">df.groupby(<span class="string">'key'</span>).aggregate([<span class="string">'min'</span>, np.median, max])</span><br><span class="line">df.groupby(<span class="string">'key'</span>).aggregate(&#123;<span class="string">'data1'</span>: <span class="string">'min'</span>,</span><br><span class="line">                             <span class="string">'data2'</span>: <span class="string">'max'</span>&#125;)</span><br><span class="line">flag_count_df.groupby(by=[<span class="string">'node'</span>, <span class="string">'stand_query'</span>])[<span class="string">'infer_query_count'</span>].transform(<span class="keyword">lambda</span> x: x/sum(x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_func</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="string">'data2'</span>].std() &gt; <span class="number">4</span></span><br><span class="line">display(<span class="string">'df'</span>, <span class="string">"df.groupby('key').std()"</span>, <span class="string">"df.groupby('key').filter(filter_func)"</span>)</span><br><span class="line"></span><br><span class="line">df.groupby(<span class="string">'key'</span>).transform(<span class="keyword">lambda</span> x: x - x.mean())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">norm_by_data2</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="comment"># x is a DataFrame of group values</span></span><br><span class="line">    x[<span class="string">'data1'</span>] /= x[<span class="string">'data2'</span>].sum()</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">df.groupby(<span class="string">'key'</span>).apply(norm_by_data2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为DataFrame增加一行</span></span><br><span class="line">series_df_rslt.append(&#123;<span class="string">"DETAIL_ID"</span>: _id, <span class="string">"DATA_TYPE"</span>: _type&#125;, ignore_index=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个相同的DF拼接, concat不会开辟新的内存空间来复制数据</span></span><br><span class="line">series_df = series_df.append(series_df_2, ignore_index=<span class="keyword">True</span>)</span><br><span class="line">pd.concat([df1, df2])</span><br><span class="line">pd.concat([df3, df4], axis=<span class="string">'col'</span>)</span><br><span class="line">pd.concat([x, y], ignore_index=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Join操作</span></span><br><span class="line">pd.merge(df1, df2, on=<span class="string">'key'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 矩阵操作</span></span><br><span class="line">df = pd.DataFrame(data=&#123;<span class="string">"A"</span>:[<span class="number">1</span>,<span class="number">2</span>], <span class="string">"B"</span>:[<span class="number">1.2</span>,<span class="number">1.3</span>]&#125;)</span><br><span class="line">df[<span class="string">"C"</span>] = df[<span class="string">"A"</span>]+df[<span class="string">"B"</span>]</span><br><span class="line">df[<span class="string">"D"</span>] = df[<span class="string">"A"</span>]*<span class="number">3</span></span><br><span class="line">df[<span class="string">"E"</span>] = np.sqrt(df[<span class="string">"A"</span>])</span><br><span class="line">df[<span class="string">"F"</span>] = df.Z.str.upper()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据统计</span></span><br><span class="line">df.describe()</span><br><span class="line">df.cov()</span><br><span class="line">df.corr()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 柱狀图</span></span><br><span class="line">plot_df = DataFrame(np.random.randn(<span class="number">1000</span>,<span class="number">2</span>),columns=[<span class="string">'x'</span>,<span class="string">'y'</span>])</span><br><span class="line">plot_df[<span class="string">'y'</span>] = plot_df[<span class="string">'y'</span>].map(<span class="keyword">lambda</span> x : x + <span class="number">1</span>)</span><br><span class="line">plot_df.plot()</span><br><span class="line">plot_df.hist()</span><br><span class="line"></span><br><span class="line"><span class="comment"># eval(), query() 追求更高性能</span></span><br><span class="line">nrows, ncols = <span class="number">100000</span>, <span class="number">100</span></span><br><span class="line">rng = np.random.RandomState(<span class="number">42</span>)</span><br><span class="line">df1, df2, df3, df4 = (pd.DataFrame(rng.rand(nrows, ncols))</span><br><span class="line">                      <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>))</span><br><span class="line">np.allclose(df1 + df2 + df3 + df4,</span><br><span class="line">            pd.eval(<span class="string">'df1 + df2 + df3 + df4'</span>))</span><br><span class="line"></span><br><span class="line">Cmean = df[<span class="string">'C'</span>].mean()</span><br><span class="line">result1 = df[(df.A &lt; Cmean) &amp; (df.B &lt; Cmean)]</span><br><span class="line">result2 = df.query(<span class="string">'A &lt; @Cmean and B &lt; @Cmean'</span>)</span><br><span class="line">np.allclose(result1, result2)</span><br></pre></td></tr></table></figure><p>代码已上传到<a href="https://gist.github.com/ansvver/3d5fa4aacba4a6d1833e014dc4799bed" target="_blank" rel="noopener">Gist</a>，欢迎收藏：）</p><p>（ 注：代码部分收集自 <a href="https://gist.github.com/bsweger/e5817488d161f37dcbd2" target="_blank" rel="noopener">https://gist.github.com/bsweger/e5817488d161f37dcbd2</a> ）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://yabuhoo.qiniudn.com/static/img/201708/pandas_logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;一直认为&lt;code&gt;pandas&lt;/code&gt; 是个好用但也难用的东西，因为它能做的东西太多了，同一个操作也有多种实现的方式（当然不同方式之前会有一些性能与规范上的差异），这也导致&lt;code&gt;pandas&lt;/code&gt;的API函数十分的多。&lt;/p&gt;
&lt;p&gt;以下是我整理的一些常用应用场景，每一个方法或技巧都是点一下，如果读者觉得某一点需求适用，再自行google相应的api，毕竟每个人的需求不同。&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="http://ansvver.me/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="Python" scheme="http://ansvver.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Numpy基本用法3</title>
    <link href="http://ansvver.me/2017/08/18/numpy-part3/"/>
    <id>http://ansvver.me/2017/08/18/numpy-part3/</id>
    <published>2017-08-18T08:01:53.000Z</published>
    <updated>2018-03-20T09:41:40.410Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Mask"><a href="#Mask" class="headerlink" title="Mask"></a>Mask</h3><p>在<code>Numpy</code>与<code>Pandas</code>中，条件过滤是很常见的需求，对于使用<code>and</code>/<code>or</code>还是<code>&amp;</code>/<code>|</code>，我们只需记住，<code>and</code>和<code>or</code>使用于整个对象，而<code>&amp;</code>和<code>|</code>作用于对象的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">A = np.array([1, 0, 1, 0, 1, 0], dtype=bool)</span><br><span class="line">B = np.array([1, 1, 1, 0, 1, 1], dtype=bool)</span><br><span class="line">A | B</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">array([ True, True, True, False, True, True], dtype=bool)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">A or B</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ValueError Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-38-5d8e4f2e21c0&gt; in &lt;module&gt;()</span><br><span class="line">----&gt; 1 A or B</span><br><span class="line">ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="kNN"><a href="#kNN" class="headerlink" title="kNN"></a>kNN</h3><p> kNN(k-Nearest Neighbors) 是一个简单的分类算法，把要预测的样本归类到k个最相邻的样本中的大多数样本所属的类别。</p><p>其关键在于找到该样本的最近k个样本。</p><p>本文主要以Numpy的方式简单实现此算法，旨在记录Numpy的矩阵应用。</p><p>（Anaconda默认没安装seaborn，执行此命令安装：<code>conda install seaborn</code>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">X = np.random.rand(<span class="number">20</span>, <span class="number">2</span>) <span class="comment"># 生成20个随机样本</span></span><br><span class="line"></span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn</span><br><span class="line"></span><br><span class="line">seaborn.set()</span><br><span class="line">plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], s=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><img src="http://yabuhoo.qiniudn.com/static/img/201708/plot.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">differences = X[:, np.newaxis, :] - X[np.newaxis, :, :] <span class="comment"># 计算每个点（X/Y轴）与所有点的差</span></span><br><span class="line">sq_differences = differences ** <span class="number">2</span> <span class="comment"># 坐标差求平方</span></span><br><span class="line">dist_sq = sq_differences.sum(<span class="number">-1</span>) <span class="comment"># 到此完成(x1-x2)^2+(y1-y2)^2</span></span><br><span class="line"></span><br><span class="line">dist_sq.diagonal() <span class="comment"># 矩阵对角线为0，因为都是计算一个点与自己的距离</span></span><br><span class="line"></span><br><span class="line">nearest = np.argsort(dist_sq, axis=<span class="number">1</span>) <span class="comment"># 对每个点与其他点的距离进行排序，返回的是每个点的下标</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[[ 0 45 58 ..., 44 35 79]</span></span><br><span class="line"><span class="string"> [ 1 30 77 ..., 41 44 79]</span></span><br><span class="line"><span class="string"> [ 2 95 16 ..., 51 92 52]</span></span><br><span class="line"><span class="string"> ..., </span></span><br><span class="line"><span class="string"> [97 72 85 ..., 51 52 50]</span></span><br><span class="line"><span class="string"> [98 64 44 ..., 69 48 50]</span></span><br><span class="line"><span class="string"> [99 36 53 ..., 29 92 52]]</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">K = <span class="number">3</span> <span class="comment">#假设K = 3</span></span><br><span class="line">nearest_partition = np.argpartition(dist_sq, K + <span class="number">1</span>, axis=<span class="number">1</span>) <span class="comment"># 快速找出最小的前4个点的下标（包含自己）</span></span><br></pre></td></tr></table></figure><p>至此我们基本完成了算法的核心，剩下的只需要统计每个样本的K个最近邻样本的label分布就可以了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Mask&quot;&gt;&lt;a href=&quot;#Mask&quot; class=&quot;headerlink&quot; title=&quot;Mask&quot;&gt;&lt;/a&gt;Mask&lt;/h3&gt;&lt;p&gt;在&lt;code&gt;Numpy&lt;/code&gt;与&lt;code&gt;Pandas&lt;/code&gt;中，条件过滤是很常见的需求，对于使用&lt;code&gt;and&lt;/code&gt;/&lt;code&gt;or&lt;/code&gt;还是&lt;code&gt;&amp;amp;&lt;/code&gt;/&lt;code&gt;|&lt;/code&gt;，我们只需记住，&lt;code&gt;and&lt;/code&gt;和&lt;code&gt;or&lt;/code&gt;使用于整个对象，而&lt;code&gt;&amp;amp;&lt;/code&gt;和&lt;code&gt;|&lt;/code&gt;作用于对象的内容。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A = np.array([1, 0, 1, 0, 1, 0], dtype=bool)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;B = np.array([1, 1, 1, 0, 1, 1], dtype=bool)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A | B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array([ True, True, True, False, True, True], dtype=bool)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A or B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---------------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ValueError Traceback (most recent call last)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;ipython-input-38-5d8e4f2e21c0&amp;gt; in &amp;lt;module&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;----&amp;gt; 1 A or B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="程序设计" scheme="http://ansvver.me/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="Python" scheme="http://ansvver.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Numpy基本用法2</title>
    <link href="http://ansvver.me/2017/08/11/numpy-part2/"/>
    <id>http://ansvver.me/2017/08/11/numpy-part2/</id>
    <published>2017-08-11T06:01:53.000Z</published>
    <updated>2018-03-20T09:41:40.410Z</updated>
    
    <content type="html"><![CDATA[<h3 id="循环计算效率"><a href="#循环计算效率" class="headerlink" title="循环计算效率"></a>循环计算效率</h3><p>Python（原生CPython）是一门动态解释性语言，由于其语言特性（可变类型），使得Python在进行数据运算时非常慢，运算序列不能编译成高效的机器码。</p><p>也由此衍生出许多解决的方案，如：Just-in-time  compiler版的<a href="http://pypy.org/" target="_blank" rel="noopener">Pypy</a>，把Python代码转化C的<a href="http://cython.org/" target="_blank" rel="noopener">Cython</a>，把Python代码转化为LLVM字节码的<a href="http://numba.pydata.org/" target="_blank" rel="noopener">Numba</a>，每种方案都各有优缺点，但目前这三种方案都没有像标准的CPython内核那么普及。</p><p>假设我们想求一个大数组中每个无素的倒数，用<code>for</code>原生实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_reciprocals</span><span class="params">(values)</span>:</span></span><br><span class="line">    output = np.empty(len(values))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(values)):</span><br><span class="line">        output[i] = <span class="number">1.0</span> / values[i]</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="comment"># values = np.random.randint(1, 10, size=5)</span></span><br><span class="line"><span class="comment"># compute_reciprocals(values)</span></span><br><span class="line"></span><br><span class="line">big_array = np.random.randint(<span class="number">1</span>, <span class="number">100</span>, size=<span class="number">1000000</span>)</span><br><span class="line">%timeit compute_reciprocals(big_array)</span><br><span class="line"><span class="comment"># 1 loop, best of 3: 374 ms per loop</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>机器配置不同，可能跑出的结果会不一样，但在同一台机器上跑实现同样功能的如下代码，对比还是十分明显的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%timeit (<span class="number">1.0</span> / big_array)</span><br><span class="line"><span class="comment"># 100 loops, best of 3: 4.6 ms per loop</span></span><br></pre></td></tr></table></figure><h3 id="常用通用函数"><a href="#常用通用函数" class="headerlink" title="常用通用函数"></a>常用通用函数</h3><p>Numpy中的向量化操作是通过通用函数实现的，它能有效地执行Numpy数列中的重复计算操作。同时，它的使用方法也是十分灵活多变的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">4</span>)</span><br><span class="line">print(<span class="string">"x ="</span>, x)</span><br><span class="line">print(<span class="string">"x + 5 ="</span>, x + <span class="number">5</span>)</span><br><span class="line">print(<span class="string">"x - 5 ="</span>, x - <span class="number">5</span>)</span><br><span class="line">print(<span class="string">"x * 2 ="</span>, x * <span class="number">2</span>)</span><br><span class="line">print(<span class="string">"x / 2 ="</span>, x / <span class="number">2</span>)</span><br><span class="line">print(<span class="string">"x // 2 ="</span>, x // <span class="number">2</span>) <span class="comment"># floor division</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">x = [0 1 2 3]</span></span><br><span class="line"><span class="string">x + 5 = [5 6 7 8]</span></span><br><span class="line"><span class="string">x - 5 = [-5 -4 -3 -2]</span></span><br><span class="line"><span class="string">x * 2 = [0 2 4 6]</span></span><br><span class="line"><span class="string">x / 2 = [ 0. 0.5 1. 1.5]</span></span><br><span class="line"><span class="string">x // 2 = [0 0 1 1]</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"-x = "</span>, -x)</span><br><span class="line">print(<span class="string">"x ** 2 = "</span>, x ** <span class="number">2</span>)</span><br><span class="line">print(<span class="string">"x % 2 = "</span>, x % <span class="number">2</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">-x = [ 0 -1 -2 -3]</span></span><br><span class="line"><span class="string">x ** 2 = [0 1 4 9]</span></span><br><span class="line"><span class="string">x % 2 = [0 1 0 1]</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># +    np.add</span></span><br><span class="line"><span class="comment"># -    np.subtract</span></span><br><span class="line"><span class="comment"># -    np.negative</span></span><br><span class="line"><span class="comment"># *    np.multiply </span></span><br><span class="line"><span class="comment"># /    np.divide   </span></span><br><span class="line"><span class="comment"># //    np.floor_divide    </span></span><br><span class="line"><span class="comment"># **    np.power   </span></span><br><span class="line"><span class="comment"># %    np.mod    </span></span><br><span class="line"><span class="comment"># | |    np.abs</span></span><br><span class="line"><span class="comment"># cos    np.cos</span></span><br><span class="line"><span class="comment"># e^x    np.exp(x)</span></span><br><span class="line"><span class="comment"># 2^x    np.exp2(x)</span></span><br><span class="line"><span class="comment"># 3^x    np.power(3, x)</span></span><br><span class="line"><span class="comment"># ln    np.log(x)</span></span><br><span class="line"><span class="comment"># log2    np.log2(x)</span></span><br><span class="line"><span class="comment"># log10    np.log10(x)</span></span><br><span class="line"><span class="comment"># min    np.min / np.nanmin (NaN-safe Version)</span></span><br><span class="line"><span class="comment"># max    np.max / np.nanmax (NaN-safe Version)</span></span><br><span class="line"><span class="comment"># sum    np.sum / np.nansum (NaN-safe Version)</span></span><br><span class="line"><span class="comment"># any    np.any</span></span><br><span class="line"><span class="comment"># all    np.all</span></span><br><span class="line">np.add(x, <span class="number">2</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([2, 3, 4, 5])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">5</span>)</span><br><span class="line">y = np.empty(<span class="number">5</span>)</span><br><span class="line">np.multiply(x, <span class="number">10</span>, out=y)</span><br><span class="line">print(y)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[ 0. 10. 20. 30. 40.]</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">y = np.zeros(<span class="number">10</span>)</span><br><span class="line">np.power(<span class="number">2</span>, x, out=y[::<span class="number">2</span>])</span><br><span class="line">print(y)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[ 1. 0. 2. 0. 4. 0. 8. 0. 16. 0.]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h3 id="聚合（Aggregates-以及专业函数"><a href="#聚合（Aggregates-以及专业函数" class="headerlink" title="聚合（Aggregates) 以及专业函数"></a>聚合（Aggregates) 以及专业函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Aggregates</span></span><br><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">np.add.reduce(x) <span class="comment"># 15</span></span><br><span class="line">np.multiply.reduce(x) <span class="comment"># 120</span></span><br><span class="line">np.add.accumulate(x) <span class="comment"># array([ 1, 3, 6, 10, 15])</span></span><br><span class="line">np.multiply.accumulate(x) <span class="comment"># array([ 1, 2, 6, 24, 120])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> special</span><br><span class="line"><span class="comment"># https://docs.scipy.org/doc/scipy-0.14.0/reference/special.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Gamma functions (generalized factorials) and related functions</span></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>]</span><br><span class="line">print(<span class="string">"gamma(x) ="</span>, special.gamma(x))</span><br><span class="line">print(<span class="string">"ln|gamma(x)| ="</span>, special.gammaln(x))</span><br><span class="line">print(<span class="string">"beta(x, 2) ="</span>, special.beta(x, <span class="number">2</span>))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">gamma(x) = [ 1.00000000e+00 2.40000000e+01 3.62880000e+05]</span></span><br><span class="line"><span class="string">ln|gamma(x)| = [ 0. 3.17805383 12.80182748]</span></span><br><span class="line"><span class="string">beta(x, 2) = [ 0.5 0.03333333 0.00909091]</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Error function (integral of Gaussian)</span></span><br><span class="line"><span class="comment"># its complement, and its inverse</span></span><br><span class="line">x = np.array([<span class="number">0</span>, <span class="number">0.3</span>, <span class="number">0.7</span>, <span class="number">1.0</span>])</span><br><span class="line">print(<span class="string">"erf(x) ="</span>, special.erf(x))</span><br><span class="line">print(<span class="string">"erfc(x) ="</span>, special.erfc(x))</span><br><span class="line">print(<span class="string">"erfinv(x) ="</span>, special.erfinv(x))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">erf(x) = [ 0. 0.32862676 0.67780119 0.84270079]</span></span><br><span class="line"><span class="string">erfc(x) = [ 1. 0.67137324 0.32219881 0.15729921]</span></span><br><span class="line"><span class="string">erfinv(x) = [ 0. 0.27246271 0.73286908 inf]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h3 id="Broadcasting"><a href="#Broadcasting" class="headerlink" title="Broadcasting"></a>Broadcasting</h3><p><img src="http://yabuhoo.qiniudn.com/static/img/201708/02.05-broadcasting.png" alt=""></p><ul><li>Rule 1: If the two arrays differ in their number of dimensions, the shape of the one with fewer dimensions is padded with ones on its leading (left) side.</li><li>Rule 2: If the shape of the two arrays does not match in any dimension, the array with shape equal to 1 in that dimension is stretched to match the other shape.</li><li>Rule 3: If in any dimension the sizes disagree and neither is equal to 1, an error is raised.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">3</span>).reshape((<span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line">b = np.arange(<span class="number">3</span>)</span><br><span class="line">a + b</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[0, 1, 2],</span></span><br><span class="line"><span class="string">       [1, 2, 3],</span></span><br><span class="line"><span class="string">       [2, 3, 4]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a.shape = (3, 1)    -&gt; (3, 1)    -&gt; (3, 3)</span></span><br><span class="line"><span class="comment"># b.shape = (3,)    -&gt; (1, 3)    -&gt; (3, 3)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;循环计算效率&quot;&gt;&lt;a href=&quot;#循环计算效率&quot; class=&quot;headerlink&quot; title=&quot;循环计算效率&quot;&gt;&lt;/a&gt;循环计算效率&lt;/h3&gt;&lt;p&gt;Python（原生CPython）是一门动态解释性语言，由于其语言特性（可变类型），使得Python在进行数据运算时非常慢，运算序列不能编译成高效的机器码。&lt;/p&gt;
&lt;p&gt;也由此衍生出许多解决的方案，如：Just-in-time  compiler版的&lt;a href=&quot;http://pypy.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Pypy&lt;/a&gt;，把Python代码转化C的&lt;a href=&quot;http://cython.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cython&lt;/a&gt;，把Python代码转化为LLVM字节码的&lt;a href=&quot;http://numba.pydata.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Numba&lt;/a&gt;，每种方案都各有优缺点，但目前这三种方案都没有像标准的CPython内核那么普及。&lt;/p&gt;
&lt;p&gt;假设我们想求一个大数组中每个无素的倒数，用&lt;code&gt;for&lt;/code&gt;原生实现如下：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;np.random.seed(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compute_reciprocals&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(values)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    output = np.empty(len(values))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(len(values)):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        output[i] = &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt; / values[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; output&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# values = np.random.randint(1, 10, size=5)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# compute_reciprocals(values)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;big_array = np.random.randint(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, size=&lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%timeit compute_reciprocals(big_array)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 1 loop, best of 3: 374 ms per loop&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="程序设计" scheme="http://ansvver.me/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="Python" scheme="http://ansvver.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Numpy基本用法1</title>
    <link href="http://ansvver.me/2017/08/09/numpy-part1/"/>
    <id>http://ansvver.me/2017/08/09/numpy-part1/</id>
    <published>2017-08-09T12:48:53.000Z</published>
    <updated>2018-03-20T09:41:40.409Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Numpy-Array-Vs-Python-List"><a href="#Numpy-Array-Vs-Python-List" class="headerlink" title="Numpy Array Vs Python List"></a>Numpy Array Vs Python List</h3><p>Python是一门动态语言，与C/C++、Java不同，它在使用时无需声明变量的类型</p><p>Python List 也有此特性，我们可以这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L3 = [True, &quot;2&quot;, 3.0, 4]</span><br></pre></td></tr></table></figure><p>为了带来这种灵活性也必须付出一些代价，那就是列表中的每一个元素，在存储时必须记录下它的类型信息，引用数量和其他信息（Python底层也是C实现），也就是每一个元素都是一个完整的对象。</p><p>在科学计算中，我们往往存储的是相同类型的数据，固定类型数组会更加高效，减少冗余信息。Numpy Array就是一种固定类型的数组，如下图所示，它只需维护一个指向连续块数据的指针。</p><a id="more"></a><p><img src="http://yabuhoo.qiniudn.com/static/img/201708/array_vs_list.png" alt=""></p><p><strong>总结起来，Python List 动态类型，更灵活；Numpy Array  固定类型，数据存储与操作更高效。</strong></p><h3 id="Numpy-Array"><a href="#Numpy-Array" class="headerlink" title="Numpy Array"></a>Numpy Array</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a length-10 integer array filled with zeros</span></span><br><span class="line">np.zeros(<span class="number">10</span>, dtype=int)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a 3x5 floating-point array filled with ones</span></span><br><span class="line">np.ones((<span class="number">3</span>, <span class="number">5</span>), dtype=float)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[ 1., 1., 1., 1., 1.],</span></span><br><span class="line"><span class="string">       [ 1., 1., 1., 1., 1.],</span></span><br><span class="line"><span class="string">       [ 1., 1., 1., 1., 1.]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a 3x5 array filled with 3.14</span></span><br><span class="line">np.full((<span class="number">3</span>, <span class="number">5</span>), <span class="number">3.14</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[ 3.14, 3.14, 3.14, 3.14, 3.14],</span></span><br><span class="line"><span class="string">       [ 3.14, 3.14, 3.14, 3.14, 3.14],</span></span><br><span class="line"><span class="string">       [ 3.14, 3.14, 3.14, 3.14, 3.14]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create an array filled with a linear sequence</span></span><br><span class="line"><span class="comment"># Starting at 0, ending at 20, stepping by 2</span></span><br><span class="line"><span class="comment"># (this is similar to the built-in range() function)</span></span><br><span class="line">np.arange(<span class="number">0</span>, <span class="number">20</span>, <span class="number">2</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([ 0, 2, 4, 6, 8, 10, 12, 14, 16, 18])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create an array of five values evenly spaced between 0 and 1</span></span><br><span class="line">np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([ 0. , 0.25, 0.5 , 0.75, 1. ])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a 3x3 array of uniformly distributed</span></span><br><span class="line"><span class="comment"># random values between 0 and 1</span></span><br><span class="line">np.random.random((<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[ 0.99844933,  0.52183819,  0.22421193],</span></span><br><span class="line"><span class="string">       [ 0.08007488,  0.45429293,  0.20941444],</span></span><br><span class="line"><span class="string">       [ 0.14360941,  0.96910973,  0.946117  ]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a 3x3 array of normally distributed random values</span></span><br><span class="line"><span class="comment"># with mean 0 and standard deviation 1</span></span><br><span class="line">np.random.normal(<span class="number">0</span>, <span class="number">1</span>, (<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[ 1.51772646, 0.39614948, -0.10634696],</span></span><br><span class="line"><span class="string">       [ 0.25671348, 0.00732722, 0.37783601],</span></span><br><span class="line"><span class="string">       [ 0.68446945, 0.15926039, -0.70744073]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a 3x3 identity matrix</span></span><br><span class="line">np.eye(<span class="number">3</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[ 1., 0., 0.],</span></span><br><span class="line"><span class="string">       [ 0., 1., 0.],</span></span><br><span class="line"><span class="string">       [ 0., 0., 1.]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create an uninitialized array of three integers</span></span><br><span class="line"><span class="comment"># The values will be whatever happens to already exist at that memory location</span></span><br><span class="line">np.empty(<span class="number">3</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([ 0.,  0.,  0.])</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>类型指定有如下方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.zeros(<span class="number">10</span>, dtype=<span class="string">'int16'</span>)</span><br><span class="line">np.zeros(<span class="number">10</span>, dtype=np.int16)</span><br></pre></td></tr></table></figure><p>一些能记住就记住的数字<br><code>int8</code>: Byte (-128 to 127)<br><code>int16</code>: Integer (-32768 to 32767)<br><code>int32</code>: Integer (-2147483648 to 2147483647)<br><code>int64</code>: Integer (-9223372036854775808 to 9223372036854775807)<br><code>uint16</code>: Unsigned integer (0 to 65535)</p><h3 id="基础数据操作"><a href="#基础数据操作" class="headerlink" title="基础数据操作"></a>基础数据操作</h3><p>一维数组的操作与Python List相同，二维以上的操作如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.random.seed(<span class="number">0</span>) <span class="comment"># seed for reproducibility</span></span><br><span class="line">x3 = np.random.randint(<span class="number">10</span>, size=(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)) <span class="comment"># Three-dimensional array</span></span><br><span class="line">print(<span class="string">"x3 ndim: "</span>, x3.ndim)</span><br><span class="line">print(<span class="string">"x3 shape:"</span>, x3.shape)</span><br><span class="line">print(<span class="string">"x3 size: "</span>, x3.size)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">x3 ndim: 3</span></span><br><span class="line"><span class="string">x3 shape: (3, 4, 5)</span></span><br><span class="line"><span class="string">x3 size: 60</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x2</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[12, 5, 2, 4],</span></span><br><span class="line"><span class="string">       [ 7, 6, 8, 8],</span></span><br><span class="line"><span class="string">       [ 1, 6, 7, 7]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">x2[:<span class="number">2</span>, :<span class="number">3</span>] <span class="comment"># two rows, three columns</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[12, 5, 2],</span></span><br><span class="line"><span class="string">       [ 7, 6, 8]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">x2[:<span class="number">3</span>, ::<span class="number">2</span>] <span class="comment"># all rows, every other column</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[12, 2],</span></span><br><span class="line"><span class="string">       [ 7, 8],</span></span><br><span class="line"><span class="string">       [ 1, 7]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">x2[::<span class="number">-1</span>, ::<span class="number">-1</span>] <span class="comment"># Finally, subarray dimensions can even be reversed together:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[ 7, 7, 6, 1],</span></span><br><span class="line"><span class="string">       [ 8, 8, 6, 7],</span></span><br><span class="line"><span class="string">       [ 4, 2, 5, 12]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">x2[<span class="number">0</span>] <span class="comment"># equivalent to x2[0, :]</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[12 5 2 4]</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">x2_sub_copy = x2[:<span class="number">2</span>, :<span class="number">2</span>].copy()</span><br><span class="line">x2_sub_copy[<span class="number">0</span>, <span class="number">0</span>] = <span class="number">42</span></span><br><span class="line"></span><br><span class="line">grid = np.arange(<span class="number">1</span>, <span class="number">10</span>).reshape((<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line">print(grid)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[[1 2 3]</span></span><br><span class="line"><span class="string"> [4 5 6]</span></span><br><span class="line"><span class="string"> [7 8 9]]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>组合与切分：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">y = np.array([<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line">np.concatenate([x, y])</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([1, 2, 3, 3, 2, 1])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">z = [<span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>]</span><br><span class="line">print(np.concatenate([x, y, z]))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[ 1 2 3 3 2 1 99 99 99]</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">grid = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">                 [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">np.concatenate([grid, grid])</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[1, 2, 3],</span></span><br><span class="line"><span class="string">       [4, 5, 6],</span></span><br><span class="line"><span class="string">       [1, 2, 3],</span></span><br><span class="line"><span class="string">       [4, 5, 6]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">np.concatenate([grid, grid], axis=<span class="number">1</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[1, 2, 3, 1, 2, 3],</span></span><br><span class="line"><span class="string">       [4, 5, 6, 4, 5, 6]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">grid = np.array([[<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>],</span><br><span class="line">                 [<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>]])</span><br><span class="line">np.vstack([x, grid])</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[1, 2, 3],</span></span><br><span class="line"><span class="string">       [9, 8, 7],</span></span><br><span class="line"><span class="string">       [6, 5, 4]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">y = np.array([[<span class="number">99</span>],</span><br><span class="line">              [<span class="number">99</span>]])</span><br><span class="line">np.hstack([grid, y])</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[ 9, 8, 7, 99],</span></span><br><span class="line"><span class="string">       [ 6, 5, 4, 99]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">x1, x2, x3 = np.split(x, [<span class="number">3</span>, <span class="number">5</span>])</span><br><span class="line">print(x1, x2, x3)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[1 2 3] [99 99] [3 2 1]</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">grid = np.arange(<span class="number">16</span>).reshape((<span class="number">4</span>, <span class="number">4</span>))</span><br><span class="line">grid</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[ 0, 1, 2, 3],</span></span><br><span class="line"><span class="string">       [ 4, 5, 6, 7],</span></span><br><span class="line"><span class="string">       [ 8, 9, 10, 11],</span></span><br><span class="line"><span class="string">       [12, 13, 14, 15]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">upper, lower = np.vsplit(grid, [<span class="number">2</span>])</span><br><span class="line">print(upper)</span><br><span class="line">print(lower)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[[0 1 2 3]</span></span><br><span class="line"><span class="string"> [4 5 6 7]]</span></span><br><span class="line"><span class="string">[[ 8 9 10 11]</span></span><br><span class="line"><span class="string"> [12 13 14 15]]</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">left, right = np.hsplit(grid, [<span class="number">2</span>])</span><br><span class="line">print(left)</span><br><span class="line">print(right)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[[ 0 1]</span></span><br><span class="line"><span class="string"> [ 4 5]</span></span><br><span class="line"><span class="string"> [ 8 9]</span></span><br><span class="line"><span class="string"> [12 13]]</span></span><br><span class="line"><span class="string">[[ 2 3]</span></span><br><span class="line"><span class="string"> [ 6 7]</span></span><br><span class="line"><span class="string"> [10 11]</span></span><br><span class="line"><span class="string"> [14 15]]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Numpy-Array-Vs-Python-List&quot;&gt;&lt;a href=&quot;#Numpy-Array-Vs-Python-List&quot; class=&quot;headerlink&quot; title=&quot;Numpy Array Vs Python List&quot;&gt;&lt;/a&gt;Numpy Array Vs Python List&lt;/h3&gt;&lt;p&gt;Python是一门动态语言，与C/C++、Java不同，它在使用时无需声明变量的类型&lt;/p&gt;
&lt;p&gt;Python List 也有此特性，我们可以这样写：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;L3 = [True, &amp;quot;2&amp;quot;, 3.0, 4]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了带来这种灵活性也必须付出一些代价，那就是列表中的每一个元素，在存储时必须记录下它的类型信息，引用数量和其他信息（Python底层也是C实现），也就是每一个元素都是一个完整的对象。&lt;/p&gt;
&lt;p&gt;在科学计算中，我们往往存储的是相同类型的数据，固定类型数组会更加高效，减少冗余信息。Numpy Array就是一种固定类型的数组，如下图所示，它只需维护一个指向连续块数据的指针。&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="http://ansvver.me/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="Python" scheme="http://ansvver.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>IPython基本用法</title>
    <link href="http://ansvver.me/2017/08/09/ipython-note/"/>
    <id>http://ansvver.me/2017/08/09/ipython-note/</id>
    <published>2017-08-09T12:36:00.000Z</published>
    <updated>2018-03-20T09:41:40.409Z</updated>
    
    <content type="html"><![CDATA[<p>IPython是一个简单、强大且高效的工具，个人使用了挺长时间了，介绍一下这款软件的基本用法。</p><p><img src="http://yabuhoo.qiniudn.com/static/img/201708/IPy_header.png" alt=""></p><h3 id="python小问题不需要-google"><a href="#python小问题不需要-google" class="headerlink" title="python小问题不需要 google"></a>python小问题不需要 google</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">help(dict.clear) <span class="comment"># 可以方便查看python内置数据结构和函数说明</span></span><br><span class="line">len? # 这样也可以</span><br><span class="line"></span><br><span class="line">L = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">M = [<span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">L.extend? # 很方便</span><br><span class="line">L.extend(M)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(a)</span>:</span></span><br><span class="line"><span class="string">"Return the square of a"</span></span><br><span class="line"><span class="keyword">return</span> a ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line">square?? # 显示源码</span><br><span class="line"></span><br><span class="line">sq&lt;TAB&gt; <span class="comment"># 提示</span></span><br><span class="line">*Error? # 想写try catch，先看一下有什么Error</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>Edit Mode</p><ul><li>Ctrl + [aepn] : 游标左右上下</li><li>Win + [[]] : TAB缩进</li><li>Ctr + Shift + - ：拆分单元</li></ul><p>Command Mode</p><ul><li>选中单元Shift + M ：合并单元</li><li>[oO] : 输出显示</li></ul><h3 id="Magic-Commands"><a href="#Magic-Commands" class="headerlink" title="Magic Commands"></a>Magic Commands</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">%lsmagic <span class="comment"># list magic</span></span><br><span class="line">%magic <span class="comment"># magic help</span></span><br><span class="line">%paste <span class="comment"># 粘贴网页代码，自动适应格式</span></span><br><span class="line">%run <span class="comment"># 运行文件</span></span><br><span class="line">%ls <span class="comment"># 基础shell命令都适用，同样 !ls 这种形式也是可以的</span></span><br><span class="line">%time: Time the execution of a single statement</span><br><span class="line">%timeit: Time repeated execution of a single statement <span class="keyword">for</span> more accuracy</span><br><span class="line">%prun: Run code <span class="keyword">with</span> the profiler</span><br><span class="line">%lprun: Run code <span class="keyword">with</span> the line-by-line profiler</span><br><span class="line">%memit: Measure the memory use of a single statement</span><br><span class="line">%mprun: Run code <span class="keyword">with</span> the line-by-line memory profiler</span><br></pre></td></tr></table></figure><p>其中：</p><p><code>line_profiler</code>与<code>memory_profiler</code>需要单独<code>pip install</code>，用之前，需先加载至ipython</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%load_ext line_profiler</span><br><span class="line">%load_ext memory_profiler</span><br><span class="line"></span><br><span class="line">%lprun -f sum_of_lists sum_of_lists(<span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line">%memit sum_of_lists(<span class="number">1000000</span>)</span><br><span class="line"><span class="keyword">from</span> mprun_demo <span class="keyword">import</span> sum_of_lists</span><br><span class="line">%mprun -f sum_of_lists sum_of_lists(<span class="number">1000000</span>)</span><br></pre></td></tr></table></figure><h3 id="In-amp-Out"><a href="#In-amp-Out" class="headerlink" title="In &amp; Out"></a>In &amp; Out</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Out[<span class="number">2</span>] ** Out[<span class="number">3</span>] <span class="comment"># Out对象可操作</span></span><br><span class="line"><span class="keyword">print</span> In <span class="comment"># In对象可操作</span></span><br><span class="line"><span class="keyword">print</span> _, __   <span class="comment"># 打印前一个，与前前个输出</span></span><br></pre></td></tr></table></figure><h3 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h3><p><a href="http://ipython.org/" target="_blank" rel="noopener">http://ipython.org/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IPython是一个简单、强大且高效的工具，个人使用了挺长时间了，介绍一下这款软件的基本用法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://yabuhoo.qiniudn.com/static/img/201708/IPy_header.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;python小问题不需要-google&quot;&gt;&lt;a href=&quot;#python小问题不需要-google&quot; class=&quot;headerlink&quot; title=&quot;python小问题不需要 google&quot;&gt;&lt;/a&gt;python小问题不需要 google&lt;/h3&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;help(dict.clear) &lt;span class=&quot;comment&quot;&gt;# 可以方便查看python内置数据结构和函数说明&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;len? # 这样也可以&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;L = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M = [&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;L.extend? # 很方便&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;L.extend(M)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(a)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;Return the square of a&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a ** &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;square?? # 显示源码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sq&amp;lt;TAB&amp;gt; &lt;span class=&quot;comment&quot;&gt;# 提示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*Error? # 想写try catch，先看一下有什么Error&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="程序设计" scheme="http://ansvver.me/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="Python" scheme="http://ansvver.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>增量更新MongoDB字典数据</title>
    <link href="http://ansvver.me/2017/06/19/incremental-update-dict-in-pymongo/"/>
    <id>http://ansvver.me/2017/06/19/incremental-update-dict-in-pymongo/</id>
    <published>2017-06-19T06:25:46.000Z</published>
    <updated>2018-03-20T09:41:40.408Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://yabuhoo.qiniudn.com/static/img/201706/update_mongodb_dict.png" alt=""></p><a id="more"></a><p>截图链接地址：<a href="https://stackoverflow.com/questions/29267519/mongodb-update-dictionary-in-document" target="_blank" rel="noopener">https://stackoverflow.com/questions/29267519/mongodb-update-dictionary-in-document</a></p><p>问题描述：</p><blockquote><p>假设MongoDB中有这么一条数据：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;id&quot; : 1,</span><br><span class="line">  &quot;attr&quot; : &#123;</span><br><span class="line">    &quot;a&quot; : 1,</span><br><span class="line">    &quot;b&quot; : 2,</span><br><span class="line">    &quot;c&quot; : 3,</span><br><span class="line">    &quot;d&quot; : &#123;</span><br><span class="line">      &quot;d1&quot;: 4.1,</span><br><span class="line">      &quot;d2&quot;: 4.2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>希望将d1更新为4.11该怎么办？</p></blockquote><p>解决方法有两种：</p><ol><li><p>把整条数据load出来，修改d1值，再更新整条数据，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res = coll.find_one(&#123;<span class="string">'id'</span>: <span class="number">1</span>&#125;)</span><br><span class="line">res[<span class="string">'attr'</span>][<span class="string">'d'</span>][<span class="string">'d1'</span>] = <span class="number">4.11</span></span><br><span class="line">coll.update_one(&#123;<span class="string">'id'</span>: <span class="number">1</span>&#125;, &#123;<span class="string">'$set'</span>: res&#125;)</span><br></pre></td></tr></table></figure></li><li><p>根据<a href="https://docs.mongodb.com/manual/reference/operator/update/set/" target="_blank" rel="noopener">官网</a>推荐，使用点号的语法进行字段更新：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res = coll.find_one(&#123;<span class="string">'id'</span>: <span class="number">1</span>&#125;)</span><br><span class="line">coll.update_one(&#123;<span class="string">'id'</span>: <span class="number">1</span>&#125;, &#123;<span class="string">'$set'</span>: &#123;<span class="string">'attr.d.d1'</span>: <span class="number">4.11</span>&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ol><p>第一种方法比较粗暴，在多进程读写时容易把原数据写错，最好使用第二种方式。</p><p>使用第二种方法时，假设你要更新的字典很大，为了避免自己手写冗长的点号语法字典（有时还会写错），我写了一个将普通字典转为MongoDB点号语法字典的函数：</p><!--<script src="https://gist.github.com/ansvver/76a24038c9ab7b4cec835b3276e44075.js"></script>--><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dict2dot</span><span class="params">(foo, bar)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> foo.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(v, dict):</span><br><span class="line">            bar[k] = v</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">for</span> kk, vv <span class="keyword">in</span> v.items():</span><br><span class="line">            dict2dot(&#123;<span class="string">'&#123;&#125;.&#123;&#125;'</span>.format(k, kk): vv&#125;, bar)</span><br><span class="line"></span><br><span class="line">foo = &#123;</span><br><span class="line">    <span class="string">'a0'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'a1'</span>: &#123;</span><br><span class="line">        <span class="string">'b0'</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">'b1'</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">'b2'</span>: &#123;</span><br><span class="line">            <span class="string">'c0'</span>:<span class="number">4</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'b3'</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="string">'b4'</span>: &#123;</span><br><span class="line">            <span class="string">'c0'</span>:<span class="number">7</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'a2'</span>: <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar = &#123;&#125;</span><br><span class="line"><span class="keyword">print</span> foo</span><br><span class="line">dict2dot(foo, bar)</span><br><span class="line"><span class="keyword">print</span> bar</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Output:</span></span><br><span class="line"><span class="string">&#123;'a1': &#123;'b4': &#123;'c0': 7&#125;, 'b0': 2, 'b1': 3, 'b2': &#123;'c0': 4&#125;, 'b3': 6&#125;, 'a0': 1, 'a2': 5&#125;</span></span><br><span class="line"><span class="string">&#123;'a1.b4.c0': 7, 'a1.b3': 6, 'a1.b1': 3, 'a1.b0': 2, 'a1.b2.c0': 4, 'a0': 1, 'a2': 5&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>使用范例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;&#125;</span><br><span class="line">a[<span class="string">'a1'</span>][<span class="string">'b0'</span>] = <span class="number">1</span></span><br><span class="line">a[<span class="string">'a2'</span>] = <span class="number">3</span></span><br><span class="line">a[<span class="string">'a1'</span>][<span class="string">'b4'</span>][<span class="string">'c0'</span>] = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">cache_a = &#123;&#125;</span><br><span class="line">dict2dot(a, cache_a)</span><br><span class="line">coll.update(&#123;<span class="string">'id'</span>:<span class="number">1</span>, <span class="string">'$set'</span>: cache_a&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://yabuhoo.qiniudn.com/static/img/201706/update_mongodb_dict.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法实践" scheme="http://ansvver.me/categories/%E7%AE%97%E6%B3%95%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="MongoDB" scheme="http://ansvver.me/tags/MongoDB/"/>
    
      <category term="递归" scheme="http://ansvver.me/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
</feed>
